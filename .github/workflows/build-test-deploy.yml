#
# SPDX-FileCopyrightText: 2023 Lifely
# SPDX-License-Identifier: EUPL-1.2+
#
name: Build, test & deploy

on:
  pull_request:
  merge_group:
  workflow_dispatch:
  push:
    branches:
      - main

# cancel any previous runs of this workflow for this branch that are still in progress
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: '21'
  CONTAINER_REGISTRY_URL: 'ghcr.io/infonl'
  APPLICATION_NAME: 'zaakafhandelcomponent'

permissions:
  contents: write
  packages: write
  checks: write
  pull-requests: write
  # Required for uploading SARIF reports
  security-events: write

jobs:
  next-version:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.get-version.outputs.replaced }}
      tag: ${{ steps.get-tag.outputs.new_tag }}
    steps:
      # Checkout the repository including tags
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      # Determine the next semantic version based on the commit message tags
      - name: Get next tag
        id: get-tag
        uses: anothrNick/github-tag-action@f278d49d30cdd8775cc3e7dd00b5ee11686ee297 # 1.71.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRERELEASE: false
          DEFAULT_BUMP: patch
          WITH_V: true
          RELEASE_BRANCHES: main
      - name: Get next version
        id: get-version
        uses: frabert/replace-string-action@b6828c5a4cb6371753ff873b0d1c4c4fbd9a63cb # v2.5
        with:
          pattern: 'v(.*)'
          string: ${{ steps.get-tag.outputs.new_tag }}
          replace-with: '$1'
      - name: Print new tag and version
        run: |
          echo "Next version: ${{ steps.get-version.outputs.replaced }}"
          echo "Next version tag: ${{ steps.get-tag.outputs.new_tag }}"

  create-release:
    needs: [next-version]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    env:
      NEXT_VERSION: ${{ needs.next-version.outputs.version }}
      NEXT_VERSION_TAG: ${{ needs.next-version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Create or update GitHub release
        uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5 # v1.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.NEXT_VERSION_TAG }}
          name: ${{ env.APPLICATION_NAME }} ${{ env.NEXT_VERSION }}
          body: |
            This release contains the docker image ${{ env.APPLICATION_NAME }} ${{ env.NEXT_VERSION }}, which is available
            at ${{ env.CONTAINER_REGISTRY_URL }}/${{ env.APPLICATION_NAME }}:${{ env.NEXT_VERSION }}
          draft: false
          prerelease: false
          allowUpdates: true
          makeLatest: true
          generateReleaseNotes: true

  update-publiccode-yml:
      needs: [ next-version, create-release ]
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-22.04
      env:
        NEXT_VERSION: ${{ needs.next-version.outputs.version }}
      steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: elieahd/templater@v1
        with:
            template: 'scripts/file-templates/publiccode.yaml'
            file: 'publiccode.yaml'
            variables: 'REPO_DESC=${{ github.event.repository.description }} REPO_URL=${{ github.event.repository.html_url }} SOFTWARE_VERSION=${{ needs.next-version.outputs.version }}'

#      - name: Set up Python
#        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
#        with:
#          python-version: '3.x'
#      - name: Set environment variables for the 'update publiccode' Python script
#        run: |
#          echo "REPO_NAME=${{  github.repository }}" >> $GITHUB_ENV
#          echo "REPO_DESC=${{ github.event.repository.description }}" >> $GITHUB_ENV
#          echo "REPO_URL=${{ github.event.repository.html_url }}" >> $GITHUB_ENV
#          echo "REPO_HOMEPAGE=${{ github.event.repository.homepage }}" >> $GITHUB_ENV
#          echo "REPO_LICENSE=EUPL-1.2+" >> $GITHUB_ENV
#          echo "REPO_CREATED_AT=${{ github.event.repository.created_at }}" >> $GITHUB_ENV
#          echo "MAIN_COPYRIGHT_OWNER=Lifely" >> $GITHUB_ENV
#          echo "REPO_OWNER=INFO" >> $GITHUB_ENV
#          echo "ORGANISATION_NAME=INFO" >> $GITHUB_ENV
#          echo "ORGANISATION_DESCRIPTION=Business Innovation Partner" >> $GITHUB_ENV
#          echo "ORGANISATION_URL=https://github.com/infonl" >> $GITHUB_ENV
#          echo "ORGANISATION_AVATAR=${{ github.event.organization.avatar_url }}" >> $GITHUB_ENV
#          echo "ROADMAP="https://dimpact.atlassian.net/jira/software/c/projects/PZ/boards/246"" >> $GITHUB_ENV
#          echo "SOFTWARE_VERSION=${{ needs.next-version.outputs.version }}" >> $GITHUB_ENV
#          echo "LOCALISATION_READY=true" >> $GITHUB_ENV
#          echo "AVAILABLE_LANGUAGES=[\"nl\",\"en\"]" >> $GITHUB_ENV
#
#          echo "Installing PyYAML..."
#          pip install PyYAML
#      - name: Create or update the publiccode.yml file
#        run: python update_publiccode.py
#        shell: bash
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add publiccode.yaml
          git commit -m "${{ github.workflow }}" || echo "No changes to commit"
          git push
